# This workflow is correct for remote GCS backends.

  execute_apply:
    name: 'Execute Terraform Apply'
    runs-on: ubuntu-latest
    # ... other job config ...

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          # ... your auth config ...

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      # This step is crucial and configures the GCS backend
      - name: 'Terraform Init'
        working-directory: ${{ matrix.subdir }}
        run: terraform init

      - name: 'Terraform Plan'
        working-directory: ${{ matrix.subdir }}
        run: terraform plan -no-color

      - name: 'Apply Terraform'
        working-directory: ${{ matrix.subdir }}
        run: terraform apply -input=false --auto-approve

     
      # This YAML step is correct and does not need to be changed.
      # This is the final step in your 'execute_apply' job
      - name: 'Remove SA Owner Role using Terraform Output'
        id: remove_owner_role
        working-directory: ${{ matrix.subdir }}
        run: |
          # Step 1: Reliably get the project ID from the new outputs.tf file.
          # The -raw flag ensures we get a clean string with no quotes.
          PROJECT_ID=$(terraform output -raw project_id)

          # Basic validation to ensure the output command worked
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Failed to retrieve 'project_id' from Terraform outputs."
            echo "::error::Please ensure 'outputs.tf' is present and correct."
            exit 1
          fi
          
          echo "Successfully retrieved Project ID: $PROJECT_ID"

          # Step 2: Run the Python script, passing the retrieved ID as an argument.
          python3 ../../scripts/remove_owner_role.py \
            --project-id "$PROJECT_ID" \
            --service-account-email "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"