execute_apply:
    name: 'Execute Terraform Apply'
    runs-on: ubuntu-latest
    needs: [get-projects]
    if: ${{ needs.get-projects.outputs.matrix != '[]' && needs.get-projects.outputs.matrix != '' }}
    
    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      fail-fast: false
      matrix:
        subdir: ${{ fromJson(needs.get-projects.outputs.matrix) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      
      # NEW: Add this step to set up Python in the job
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Terraform Init'
        working-directory: ${{ matrix.subdir }}
        run: terraform init

      - name: 'Terraform Plan'
        id: terraform_plan
        working-directory: ${{ matrix.subdir }}
        run: terraform plan -no-color

      - name: 'Apply Terraform'
        id: terraform_apply
        working-directory: ${{ matrix.subdir }}
        run: terraform apply -input=false --auto-approve

      # ====================================================================
      # MODIFIED STEP: This now uses the Python script
      # ====================================================================
      - name: 'Check and Remove Owner Role (Python)'
        id: check_and_remove_py
        working-directory: ${{ matrix.subdir }}
        run: |
          # First, get the project ID from the terraform output in this directory
          PROJECT_ID=$(terraform output -raw project_id)

          # Basic validation to ensure the output worked
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Could not determine project_id from terraform output. Make sure the output exists in your TF configuration."
            exit 1
          fi
          
          # Execute the python script.
          # Note: The path to the script is relative to the current working-directory.
          # If your subdirs are one level deep, `../../scripts` is correct.
          # Adjust this path if your directory structure is different.
          python3 ../../scripts/remove_owner_role.py \
            --project-id "$PROJECT_ID" \
            --service-account-email "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"