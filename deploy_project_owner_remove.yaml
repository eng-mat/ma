# This workflow is correct for remote GCS backends.

  execute_apply:
    name: 'Execute Terraform Apply'
    runs-on: ubuntu-latest
    # ... other job config ...

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          # ... your auth config ...

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      # This step is crucial and configures the GCS backend
      - name: 'Terraform Init'
        working-directory: ${{ matrix.subdir }}
        run: terraform init

      - name: 'Terraform Plan'
        working-directory: ${{ matrix.subdir }}
        run: terraform plan -no-color

      - name: 'Apply Terraform'
        working-directory: ${{ matrix.subdir }}
        run: terraform apply -input=false --auto-approve

     
      # ====================================================================
      # FINAL DEBUGGING STEP: Let's look inside the generated file
      # ====================================================================
      - name: 'Find Project in State and Remove Owner Role'
        id: secure_project_via_state
        working-directory: ${{ matrix.subdir }}
        run: |
          # Step 1: Generate the JSON state file from Terraform.
          echo "Generating JSON representation of Terraform state..."
          terraform show -json > tfshow.json

          # --- VITAL DEBUGGING COMMAND ---
          # Print the raw content of the file to the log so we can see it.
          echo "--- üßê START content of tfshow.json ---"
          cat tfshow.json
          echo "--- END content of tfshow.json ---"
          # --------------------------------

          # Step 2: Run the Python script.
          echo "Running Python script to process the state file..."
          python3 ../../scripts/remove_owner_role.py \
            --service-account-email "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}" \
            --state-file "tfshow.json"