# This workflow is correct for remote GCS backends.

  execute_apply:
    name: 'Execute Terraform Apply'
    runs-on: ubuntu-latest
    # ... other job config ...

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      
      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          # ... your auth config ...

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      # This step is crucial and configures the GCS backend
      - name: 'Terraform Init'
        working-directory: ${{ matrix.subdir }}
        run: terraform init

      - name: 'Terraform Plan'
        working-directory: ${{ matrix.subdir }}
        run: terraform plan -no-color

      - name: 'Apply Terraform'
        working-directory: ${{ matrix.subdir }}
        run: terraform apply -input=false --auto-approve

     
      # ====================================================================
      # FINAL ROBUST WORKFLOW STEP
      # ====================================================================
      - name: 'Secure Project by Removing SA Owner Role'
        id: secure_project
        working-directory: ${{ matrix.subdir }}
        run: |
          # The Python script now handles all logic internally:
          # 1. Finds the project ID from the Terraform state.
          # 2. Safely removes the owner role using the read-modify-write pattern.
          python3 ../../scripts/remove_owner_role.py \
            --service-account-email "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"






    execute_apply:
    name: 'Execute Terraform Apply'
    # ... other job config ...
    steps:
      # ... your checkout, auth, setup, init, plan steps ...

      - name: 'Apply Terraform and Save Log'
        id: terraform_apply
        working-directory: ${{ matrix.subdir }}
        # This command now saves the entire output to 'apply.log'
        run: terraform apply -input=false --auto-approve -no-color 2>&1 | tee apply.log

      # ====================================================================
      # NEW, SIMPLER ROLE REMOVAL STEP
      # ====================================================================
      - name: 'Remove SA Owner Role from Terraform Log'
        id: remove_owner_role
        working-directory: ${{ matrix.subdir }}
        run: |
          # Step 1: Extract the project_id directly from the apply.log file.
          # This is robust and avoids running any more terraform commands.
          PROJECT_ID=$(grep 'project_id = ' apply.log | awk -F'"' '{print $2}')

          # Validation to ensure the ID was found
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Could not find 'project_id' in the apply.log file."
            echo "--- Full apply.log for debugging ---"
            cat apply.log
            exit 1
          fi

          echo "Successfully extracted Project ID from log: $PROJECT_ID"

          # Step 2: Run the simple Python script with the clean Project ID
          python3 ../../scripts/remove_owner_role.py \
            --project-id "$PROJECT_ID" \
            --service-account-email "${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"