# ... (rest of your workflow file) ...

  execute_apply:
    name: 'Execute Terraform Apply'
    runs-on: ubuntu-latest
    needs: [get-projects] # Assuming 'get-projects' is the name of your job that lists directories
    if: ${{ needs.get-projects.outputs.matrix != '[]' && needs.get-projects.outputs.matrix != '' }}
    
    # These permissions are needed for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    strategy:
      fail-fast: false
      matrix:
        subdir: ${{ fromJson(needs.get-projects.outputs.matrix) }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      
      # IMPORTANT: Authentication must happen before using gcloud or terraform
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL_ID }}/providers/${{ secrets.WIF_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3

      - name: 'Terraform Init'
        working-directory: ${{ matrix.subdir }}
        run: terraform init

      - name: 'Plan Terraform'
        id: terraform_plan
        working-directory: ${{ matrix.subdir }}
        run: terraform plan -no-color

      - name: 'Apply Terraform'
        id: terraform_apply
        working-directory: ${{ matrix.subdir }}
        run: terraform apply -input=false --auto-approve

      # ====================================================================
      # NEW STEP: Add this block right after your Terraform Apply step
      # ====================================================================
      - name: 'Check and Remove Owner Role'
        id: check_and_remove
        working-directory: ${{ matrix.subdir }} # Run in the same directory as apply
        run: |
          echo "Running post-apply security step for directory: ${{ matrix.subdir }}"
          
          # Directly read the output from the terraform state in the current directory
          PROJECT_ID=$(terraform output -raw project_id)
          SA_EMAIL="serviceAccount:${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}"
          
          if [ -z "$PROJECT_ID" ]; then
            echo "::error::Could not determine project_id from terraform output. Make sure the output exists."
            exit 1
          fi
          
          echo "Securing Project: $PROJECT_ID"
          echo "Checking for 'roles/owner' on Service Account: $SA_EMAIL"
          
          # Get the IAM policy and use jq to check if the owner binding exists
          OWNER_BINDING_EXISTS=$(gcloud projects get-iam-policy "$PROJECT_ID" --format="json" \
            | jq -c --arg email "$SA_EMAIL" '.bindings[] | select(.role == "roles/owner" and (.members[] | contains($email)))')
            
          if [[ -n "$OWNER_BINDING_EXISTS" ]]; then
            echo "✅ 'owner' role found. Proceeding with removal..."
            gcloud projects remove-iam-policy-binding "$PROJECT_ID" \
              --member="$SA_EMAIL" \
              --role='roles/owner' \
              --condition=None
            echo "✅ Role 'owner' successfully removed."
          else
            echo "☑️ 'owner' role not found. Skipping removal."
          fi