# name: Infoblox CIDR Reservation

# on:
#   workflow_dispatch:
#     inputs:
#       network_view:
#         description: "Select Infoblox Network View"
#         required: true
#         type: choice
#         options:
#           - gcp-my-hub
#           - gcp-you-hub
#       supernet_choice:
#         description: "Choose Supernet (CIDR + Label)"
#         required: true
#         type: choice
#         options:
#           - 10.10.10.2/12 Test-supernet
#           - 20.20.20.3/12 nontest-supernet
#       cidr_size:
#         description: "CIDR Size (e.g., /26)"
#         required: true
#       subnet_name:
#         description: "Subnet Name"
#         required: true
#       dry_run:
#         description: "Dry-run? (true = no changes)"
#         required: true
#         default: "true"
#         type: choice
#         options:
#           - "true"
#           - "false"

# permissions:
#   contents: read
#   id-token: write

# jobs:
#   reserve-ip:
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       - uses: actions/checkout@v3

#       - uses: google-github-actions/auth@v2
#         with:
#           workload_identity_provider: ${{ secrets.GCP_WIF_POOL }}
#           service_account: ${{ secrets.GCP_SVC_ACCOUNT }}

#       - uses: google-github-actions/setup-gcloud@v1

#       - name: Set GCP Project
#         run: |
#           gcloud config set auth/impersonate_service_account ${{ secrets.GCP_AUTOMATION_ACCOUNT }}
#           gcloud config set project ${{ vars.AUTOMATION_PROJECT_ID }}

#       - uses: actions/setup-python@v5
#         with:
#           python-version: '3.11'

#       - name: Install Dependencies
#         run: pip install -r requirements.txt

#       - name: Load Infoblox Credentials from Secret Manager
#         run: |
#           echo "INFOBLOX_USER=$(gcloud secrets versions access latest --secret=infoblox-username --project=${{ vars.AUTOMATION_PROJECT_ID }} --quiet)" >> $GITHUB_ENV
#           echo "INFOBLOX_PASS=$(gcloud secrets versions access latest --secret=infoblox-password --project=${{ vars.AUTOMATION_PROJECT_ID }} --quiet)" >> $GITHUB_ENV

#       - name: Run Infoblox Reservation
#         env:
#           INFOBLOX_URL: ${{ secrets.INFOBLOX_URL }}
#           INFOBLOX_USER: ${{ env.INFOBLOX_USER }}
#           INFOBLOX_PASS: ${{ env.INFOBLOX_PASS }}
#         run: |
#           python infoblox_ipam.py --action reserve \
#             --network_view "${{ inputs.network_view }}" \
#             --supernet "${{ inputs.supernet_choice }}" \
#             --cidr "${{ inputs.cidr_size }}" \
#             --subnet_name "${{ inputs.subnet_name }}" \
#             ${{ inputs.dry_run == 'true' && '--dry_run' || '' }}




jobs:
  dry_run:
    runs-on: ubuntu-latest
    # ... other settings like environment, permissions ...
    
    # This section makes the outputs available to other jobs
    outputs:
      proposed_subnet: ${{ steps.infoblox_dry_run_step.outputs.proposed_subnet }}
      supernet_after_reservation: ${{ steps.infoblox_dry_run_step.outputs.supernet_after_reservation }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ... your setup-python and auth steps ...

      - name: Install Python dependencies
        run: pip install requests

      - name: Run Infoblox Dry Run Script
        # V V V Give the step an 'id' so you can reference its outputs V V V
        id: infoblox_dry_run_step
        run: |
          SELECTED_SUPERNET_IP=$(echo "${{ github.event.inputs.supernet_ip }}" | awk '{print $1}')
          python your_script_name.py dry-run \
            --infoblox-url ${{ secrets.INFOBLOX_URL }} \
            --network-view "${{ github.event.inputs.network_view }}" \
            --supernet-ip "${SELECTED_SUPERNET_IP}" \
            --subnet-name "${{ github.event.inputs.subnet_name }}" \
            --cidr-block-size ${{ github.event.inputs.cidr_block_size }} \
            --site-code "GCP"
        env:
          INFOBLOX_USERNAME: ${{ env.INFOBLOX_USERNAME }}
          INFOBLOX_PASSWORD: ${{ env.INFOBLOX_PASSWORD }}
          INFOBLOX_URL: ${{ secrets.INFOBLOX_URL }}

      # You no longer need the 'Capture Dry Run Output' step, as the python script handles it.

  apply:
    runs-on: ubuntu-latest
    needs: dry_run # This remains the same
    # ... other settings like environment, permissions ...
    if: success() && needs.dry_run.outputs.proposed_subnet != '' # Add a check to ensure output is not empty
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ... your setup-python and auth steps ...

      - name: Install Python dependencies
        run: pip install requests

      - name: Run Infoblox Apply Script
        run: |
          SELECTED_SUPERNET_IP=$(echo "${{ github.event.inputs.supernet_ip }}" | awk '{print $1}')
          python your_script_name.py apply \
            --infoblox-url ${{ secrets.INFOBLOX_URL }} \
            --network-view "${{ github.event.inputs.network_view }}" \
            --supernet-ip "${SELECTED_SUPERNET_IP}" \
            --subnet-name "${{ github.event.inputs.subnet_name }}" \
            --cidr-block-size ${{ github.event.inputs.cidr_block_size }} \
            --site-code "GCP" \
            --proposed-subnet "${{ needs.dry_run.outputs.proposed_subnet }}" \
            --supernet-after-reservation "${{ needs.dry_run.outputs.supernet_after_reservation }}"
        env:
          INFOBLOX_USERNAME: ${{ env.INFOBLOX_USERNAME }}
          INFOBLOX_PASSWORD: ${{ env.INFOBLOX_PASSWORD }}
          INFOBLOX_URL: ${{ secrets.INFOBLOX_URL }}