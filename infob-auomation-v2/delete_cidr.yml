name: Delete GCP CIDR Reservation in Infoblox

on:
  workflow_dispatch:
    inputs:
      network_view:
        description: "Infoblox Network View"
        type: string
        required: true
      cidr_to_delete:
        description: "CIDR to delete (e.g., 10.20.30.0/24)"
        type: string
        required: true
      subnet_name:
        description: "Subnet Name (Descriptive name of the subnet)"
        type: string
        required: true

jobs:
  delete:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_POOL }}
          service_account: ${{ secrets.GCP_SVC_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Get Infoblox Credentials
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          INFOBLOX_SECRET_NAME: ${{ secrets.INFOBLOX_SECRET_NAME }}
        run: python get_infoblox_secrets.py
      - name: Delete CIDR from Infoblox
        id: delete_cidr
        run: |
          python infoblox_ipam.py delete \
            "${{ github.event.inputs.network_view }}" \
            "${{ github.event.inputs.cidr_to_delete }}" \
            "${{ github.event.inputs.subnet_name }}"
      - name: Output Deletion Status
        if: steps.delete_cidr.outcome == 'success'
        run: echo "CIDR deletion process started."
      - name: Output Error Message
        if: steps.delete_cidr.outcome == 'failure'
        run: |
          echo "Error: $(cat error.txt)"
      - name: Create Approval Issue
        uses: actions/github-script@v7
        if: always() # Create issue even if deletion fails
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueTitle = `Infoblox CIDR Deletion Request: ${{ github.event.inputs.cidr_to_delete }}`;
            const issueBody = `Please approve the deletion of CIDR ${{ github.event.inputs.cidr_to_delete }} from Infoblox with Subnet Name: ${{ github.event.inputs.subnet_name }}.  Comment "APPROVED" to proceed.`;
            const newIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
            });
            core.setOutput("issue_number", newIssue.data.number);
      - name: Wait for Approval
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = core.getOutput("issue_number");
            console.log(`Waiting for approval on issue #${issueNumber}...`);
            let approved = false;
            for (let i = 0; i < 12; i++) { // Check for approval for up to 1 hour (12 * 5 minutes)
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              for (const comment of comments.data) {
                if (comment.body.toUpperCase().includes("APPROVED")) {
                  approved = true;
                  console.log("Approval received!");
                  break;
                }
              }
              if (approved) break;
              await new Promise(resolve => setTimeout(resolve, 300000)); // Wait 5 minutes
            }
            if (!approved) {
              core.setFailed(`Timed out waiting for approval on issue #${issueNumber}`);
            }