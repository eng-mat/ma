import argparse
import json
import subprocess
import sys
import os

def run_gcloud_command(command_args):
    """Runs a gcloud command and returns the parsed JSON output."""
    try:
        command_args.append("--format=json")
        process = subprocess.run(
            ["gcloud"] + command_args,
            capture_output=True, text=True, check=False
        )
        if process.returncode != 0:
            print(f"Error: gcloud command failed: {' '.join(['gcloud'] + command_args)}", file=sys.stderr)
            print(f"Stderr:\n{process.stderr}", file=sys.stderr)
            sys.exit(process.returncode)
        return json.loads(process.stdout)
    except Exception as e:
        print(f"An unexpected error occurred while running gcloud: {e}", file=sys.stderr)
        sys.exit(1)

def find_project_id_from_state(state_file_path):
    """Finds the GCP Project ID by reading a state file generated by 'terraform show -json'."""
    print(f"[1/4] Reading Terraform state from file '{state_file_path}'...")
    try:
        with open(state_file_path, 'r') as f:
            state_data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error: Failed to decode JSON from '{state_file_path}'. The file may be corrupted.", file=sys.stderr)
        raise e
    except FileNotFoundError:
        print(f"Error: State file not found at '{state_file_path}'.", file=sys.stderr)
        sys.exit(1)

    for resource in state_data.get("values", {}).get("root_module", {}).get("resources", []):
        if resource.get("type") == "google_project":
            project_id = resource.get("values", {}).get("project_id")
            if project_id:
                print(f"   Success: Found Project ID '{project_id}' in the state file.")
                return project_id
    
    print("Error: Could not find a 'google_project' resource in the terraform state.", file=sys.stderr)
    sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Finds project ID and removes 'owner' role.")
    parser.add_argument("--service-account-email", required=True, help="Email of the GCP Service Account.")
    parser.add_argument("--state-file", required=True, help="Path to the JSON state file from 'terraform show -json'.")
    args = parser.parse_args()

    project_id = find_project_id_from_state(args.state_file)
    member_to_remove = f"serviceAccount:{args.service_account_email}"
    role_to_remove = "roles/owner"

    print(f"\n[2/4] Fetching current IAM policy for project '{project_id}'...")
    policy = run_gcloud_command(["projects", "get-iam-policy", project_id])
    
    original_etag = policy.get("etag")
    if not original_etag:
        print("Error: Could not retrieve etag from policy.", file=sys.stderr)
        sys.exit(1)

    print("[3/4] Checking policy for member and role...")
    policy_modified = False
    owner_binding = next((b for b in policy.get("bindings", []) if b.get("role") == role_to_remove), None)

    if owner_binding and member_to_remove in owner_binding.get("members", []):
        print(f"   Success: Found '{member_to_remove}' in the '{role_to_remove}' binding.")
        owner_binding["members"].remove(member_to_remove)
        policy_modified = True
        if not owner_binding["members"]:
            policy["bindings"].remove(owner_binding)
            print("   Action: The 'roles/owner' binding is now empty and will be removed.")
        else:
            print(f"   Action: Member '{member_to_remove}' will be removed from the binding.")
    else:
        print(f"   Success: Member '{member_to_remove}' does not have the '{role_to_remove}' role. No changes needed.")

    if policy_modified:
        print("\n[4/4] Applying modified IAM policy...")
        temp_policy_file = "updated_policy.json"
        with open(temp_policy_file, "w") as f:
            json.dump(policy, f)
        try:
            run_gcloud_command(["projects", "set-iam-policy", project_id, temp_policy_file])
            print("   Success: IAM policy updated successfully.")
        finally:
            if os.path.exists(temp_policy_file):
                os.remove(temp_policy_file)
    else:
        print("\n[4/4] No changes were necessary. Script finished.")

if __name__ == "__main__":
    main()